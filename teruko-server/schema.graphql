type Query {
    image(id: String!): Image
    images(skip: Int, take: Int, tags: [String!], sort: ImageSort): [Image!]!
    random(orientation: Orientation): Image
    imageCount: Int!
    tag(slug: String!): Tag
    tagSuggestions(filter: String!): [Tag!]!
    tagCategories: [TagCategory!]!
    config: Config!
}

type Mutation {
    #createImage(fileExt: String!, title: String, source: String): Image!
    createImage(files: [Upload!]!): [Image!]!
    createImageFromUrl(url: String!): [Image!]!
    updateImage(id: String!, title: String, source: String): Image!
    updateImagePixiv(id: String!, source: String): Image!
    deleteImage(id: String!): Image!
    addTag(imageId: String!, tag: String!): Image!
    removeTag(imageId: String!, tag: String!): Image!
    updateTag(slug: String!, newSlug: String, category: String): Tag!
    deleteTag(slug: String!): Tag!
    updateTagCategory(slug: String!, color: String): TagCategory!
}

type Image {
    id: String!
    filename: String!
    title: String
    source: String
    createdAt: DateTime!
    updatedAt: DateTime!
    width: Int!
    height: Int!
    tags: [Tag!]!
}

type Tag {
    slug: String!
    category: TagCategory
    images: [Image!]!
    count: Int!
}

type TagCategory {
    slug: String!
    color: String
    tags: [Tag!]!
}

type Config {
    database: String!
    imageFolder: String!
    frontendFolder: String
    uvThreadpoolSize: Int
    sharpConcurrency: Int
}

scalar DateTime
scalar Upload

enum ImageSort {
    random,
    newest,
    oldest,
    last_updated
}

enum Orientation {
    portrait,
    landscape
}